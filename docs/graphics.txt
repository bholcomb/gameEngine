The graphics library provides a high level way to render scenes using OpenGL 4.5 (using OpenTK).  

Concepts/Classes:
Device-Interface to the graphics card, responsible for mirroring render state and pipeline state to prevent unnecessary state changes
RenderState-Per draw call state that can be changed within the context of a pipeline, typically texture mappings and uniform values
PipelineState-Encapsulates a specific shader program , blend mode, depth test, stencil test, and variables that cannot be changed easily (immutable in vulkan).
Effect-class that encapsulates the different shaders and the logic to update the render info from a specific type of renderable for a specific type of render pass
Material-parameters for lighting models and rendering surfaces.
Mesh-set of vertexes that are all rendered at once with the same material.
RenderQueue-A render queue is a list of commands that are to be executed with a specific pipeline.  Since pipelines are shader specific, this also implies renderqueues are visualizer specific.
Visualizer-Class responsible for visualizing a specific type of renderable.
View-A camera, viewport, child views, and list of passes to be rendered.  Child views will be rendered before the parent view.  Sibling views will be rendered after parent.
Pass-A render technique and renderable filter, and render target for a particular view.
DrawInfo-Per draw information needed for a particular render type.  Usually contains model matrix, material id, active lights, any animation data.  

Top-Down Description
The renderer maintains the view graph and a list of renderables.  The view graph renders all the renderable objects registered with the renderer.  A view is a camera, viewport and list of render passes, which are executed in order.  Render passes implement a render technique type.  Render passes subscribe for types of renderables that they want to render using any registered visualizers.  Visualizer use the current render pass type and renderable to select the correct shader technique (an effect) and build up any buffer data and draw commands.

Renderable objects reference a model.  Models are loaded using the resource manager and added to the renderer.  A renderable will contain instance specific data about the model such as position, rotation, material, or animation data.

The renderer render function executes several passes over the renderable list for each view to build up the buffers and commands to submit to the GPU.   

The first phase is the culling phase.   The first thing that is done is each active camera culls the entire renderable list generating a per-camera potentially visible list.  Then for each active view, using its camera's potentially visible list, gives the potentially visible list to each pass to filter to build a pass visible list.  There are several common filters that allow renderables to filtered out of the cull list based on type, distance from camera, or a specific instance of a renderable.  This builds the visible renderable list for each pass every frame.

The next phase is the prepare phase.  This where the view using a visualizer will generate any buffer data such as transforms, material data and will also create/lookup the render queues that will be used to submit draw calls to the graphics device.  This is also where all the buffers that were built in the previous phase are uploaded to the GPU. 

The next phase is the command list generation phase.  During this phase each view creates an ordered list of command lists.  These command lists are built by processing each pass's renderqueues in order. Command lists can be sorted based on some sort criteria or collapsed for multi draw rendering.

The next phase is the execute phase.  During the execute phase each view's command lists are execute on the device in order (opaque before transparent, etc)

The last phase is the present phase which uses a user provided function to present the rendered image to the user.  This could be a simple swap buffer, or it could be a copy FBO to back buffer and then swap, or it could be copying the image to an HMD.

Render commands come in two flavors, the first is a renderstate command that allows the user to adjust only renderstate within the context of a pipeline.  Most visualizers generate these types of commands since the pipeline object is set on the renderqueue that holds the commands.  The other type of command is the StatelessRenderstate, which include a pipeline state object that gets applied when it's called.  Stateless commands are intended to be used outside of the typical visualizer use case.  Compute shaders, UI, and Debug rendering use stateless commands since they tend to be called outside of the renderqueue generation.

The Effect class encapsulates a shader program to implement a specific visual effect.  It is used to generate a pipeline given a mesh material and can update the renderstate.  Visualizers select an effect for a renderable mesh based on the technique being used and the material features such as diffuse and normal mapping.  Exact matching of material features aren't required, a less capable effect may be used as a fallback if there isn't an exact match for all the features a material has.

For each renderable type, there should be a visualizer associated with it. The visualizer needs to have effects specific for that renderable registered with it in order to render the mesh for a given pass technique.   

TODO: 
Particle system visualizer
Particle system editor
Post processing manager

  

